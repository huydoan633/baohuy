from keep_alive import keep_alive
import telebot
import requests
import time
import threading
from functools import wraps

keep_alive()

# Token bot Telegram
TOKEN = "6367532329:AAEuSSv8JuGKzJQD6qI431udTvdq1l25zo0"
bot = telebot.TeleBot(TOKEN)

# ID nh√≥m v√† ID admin
GROUP_IDS = [-1002221629819, -1002334731264]  # Hai ID nh√≥m
ADMIN_ID = 5736655322  # Thay b·∫±ng Telegram user_id c·ªßa b·∫°n

# Cooldown dictionary
user_cooldowns = {}
auto_buff_tasks = {}  # L∆∞u c√°c thread auto buff

# H√†m ki·ªÉm tra cooldown
def is_on_cooldown(user_id, command):
    now = time.time()
    key = f"{user_id}_{command}"
    if key in user_cooldowns:
        if now - user_cooldowns[key] < 30:
            return True
    user_cooldowns[key] = now
    return False

# Decorator ch·ªâ d√πng trong nh√≥m
def only_in_group(func):
    @wraps(func)
    def wrapper(message):
        if message.chat.id not in GROUP_IDS:
            bot.reply_to(message, "‚ùå L·ªánh n√†y ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c trong nh√≥m @Baohuydevs ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
            return
        return func(message)
    return wrapper

# T·ª± ƒë·ªông g·ªçi API m·ªói 15 ph√∫t
def auto_buff(username, chat_id, user_id):
    if user_id not in auto_buff_tasks:
        return  # ƒê√£ b·ªã hu·ª∑

    api_url = f"https://dichvukey.site/fl.php?username={username}&key=ngocanvip"
    try:
        response = requests.get(api_url, timeout=80)
        data = response.json()
        bot.send_message(chat_id, f"‚úÖ T·ª± ƒë·ªông buff cho `@{username}` th√†nh c√¥ng!\n"
                                  f"‚ûï Th√™m: {data.get('followers_add', 0)}\n"
                                  f"üí¨ {data.get('message', 'Kh√¥ng c√≥')}",
                         parse_mode="Markdown")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå L·ªói khi t·ª± ƒë·ªông buff: {e}")

    if user_id in auto_buff_tasks:
        task = threading.Timer(900, auto_buff, args=[username, chat_id, user_id])
        auto_buff_tasks[user_id] = task
        task.start()

# L·ªánh /start
@bot.message_handler(commands=['start'])
@only_in_group
def send_welcome(message):
    bot.reply_to(message,
        "Xin ch√†o!\n"
        "S·ª≠ d·ª•ng c√°c l·ªánh sau ƒë·ªÉ ki·ªÉm tra t√†i kho·∫£n TikTok:\n\n"
        "`/buff <username>` - Ki·ªÉm tra b·∫±ng API 2\n"
        "`/fl3 <username>` - Ki·ªÉm tra b·∫±ng API 3 (Soundcast)\n"
        "`/treo <username>` - T·ª± ƒë·ªông buff m·ªói 15 ph√∫t (ch·ªâ admin)\n"
        "`/huytreo` - Hu·ª∑ treo\n\n"
        "V√≠ d·ª•: `/buff baohuydz158`, `/treo baohuydz158`",
        parse_mode="Markdown"
    )

# L·ªánh /buff
@bot.message_handler(commands=['buff'])
@only_in_group
def handle_buff(message):
    if is_on_cooldown(message.from_user.id, 'buff'):
        bot.reply_to(message, "‚è≥ Vui l√≤ng ƒë·ª£i 30 gi√¢y tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")
        return

    parts = message.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå Vui l√≤ng cung c·∫•p t√™n ng∆∞·ªùi d√πng TikTok. V√≠ d·ª•: `/buff baohuydz158`", parse_mode="Markdown")
        return
    username = parts[1].lstrip("@")

    bot.send_chat_action(message.chat.id, "typing")
    time.sleep(1)
    bot.reply_to(message, f"üîç ƒêang ki·ªÉm tra `@{username}` b·∫±ng API 2...", parse_mode="Markdown")

    api_url = f"https://dichvukey.site/fl.php?username={username}&key=ngocanvip"

    try:
        response = requests.get(api_url, timeout=80)
        response.raise_for_status()
        data = response.json()
    except requests.exceptions.RequestException:
        bot.reply_to(message, "‚ùå L·ªói khi k·∫øt n·ªëi v·ªõi API. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return
    except ValueError:
        bot.reply_to(message, f"‚úÖTh√¥ng b√°o: {response.text.strip()}")
        return

    if str(data.get("status", "")).lower() not in ["true", "1", "success"]:
        bot.reply_to(message, f"‚úÖTh√¥ng b√°o: {data.get('message', 'TƒÉng Th√†nh c√¥ng')}")
        return

    reply_text = (
        f"‚úÖ *Th√¥ng tin t√†i kho·∫£n (API 2):*\n\n"
        f"üí¨ *Th√¥ng b√°o:* {data.get('message', 'Kh√¥ng c√≥')}\n"
        f"üë• *Followers Tr∆∞·ªõc:* {data.get('followers_before', 0)}\n"
        f"üë• *Followers Sau:* {data.get('followers_after', 0)}\n"
        f"‚ú® *ƒê√£ th√™m:* {data.get('followers_add', 0)}\n\n"
        f"üîç *Tr·∫°ng th√°i:* ‚úÖ"
    )
    bot.reply_to(message, reply_text, parse_mode="Markdown", disable_web_page_preview=True)

# L·ªánh /fl3 (ƒê√É THAY API)
@bot.message_handler(commands=['fl3'])
@only_in_group
def handle_fl3(message):
    if is_on_cooldown(message.from_user.id, 'fl3'):
        bot.reply_to(message, "‚è≥ Vui l√≤ng ƒë·ª£i 30 gi√¢y tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")
        return

    parts = message.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå Vui l√≤ng cung c·∫•p t√™n ng∆∞·ªùi d√πng TikTok. V√≠ d·ª•: `/fl3 ngocanvip`", parse_mode="Markdown")
        return
    username = parts[1].lstrip("@")

    bot.send_chat_action(message.chat.id, "typing")
    time.sleep(1)
    bot.reply_to(message, f"üîç ƒêang ki·ªÉm tra `@{username}` b·∫±ng API 3...", parse_mode="Markdown")

    api_url = f"https://nvp310107.x10.mx/fltik.php?username={username}&key=30T42025VN"

    try:
        response = requests.get(api_url, timeout=30)
        response.raise_for_status()
        data = response.json()
    except requests.exceptions.RequestException:
        bot.reply_to(message, "‚ùå L·ªói khi k·∫øt n·ªëi v·ªõi API 3. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return
    except ValueError:
        bot.reply_to(message, f"‚úÖTh√¥ng b√°o: {response.text.strip()}")
        return

    reply_text = (
        f"‚úÖ *Th√¥ng tin t√†i kho·∫£n (API 3):*\n\n"
        f"üí¨ *Th√¥ng b√°o:* {data.get('message', 'Kh√¥ng c√≥')}\n"
        f"üë• *Followers Tr∆∞·ªõc:* {data.get('followers_before', 'N/A')}\n"
        f"üë• *Followers Sau:* {data.get('followers_after', 'N/A')}\n"
        f"‚ú® *ƒê√£ th√™m:* {data.get('followers_add', 'N/A')}\n\n"
        f"üîç *Tr·∫°ng th√°i:* {data.get('status', 'Kh√¥ng r√µ')}"
    )
    bot.reply_to(message, reply_text, parse_mode="Markdown", disable_web_page_preview=True)

# L·ªánh /treo (ch·ªâ admin)
@bot.message_handler(commands=['treo'])
@only_in_group
def handle_treo(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå L·ªánh n√†y ch·ªâ admin ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng.")
        return

    parts = message.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(message, "‚ùå Vui l√≤ng cung c·∫•p username TikTok. V√≠ d·ª•: `/treo baohuydz158`", parse_mode="Markdown")
        return

    username = parts[1].lstrip("@")
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id in auto_buff_tasks:
        bot.reply_to(message, "‚ö†Ô∏è ƒêang treo r·ªìi. Mu·ªën treo kh√°c th√¨ d√πng `/huytreo` tr∆∞·ªõc.")
        return

    bot.reply_to(message, f"‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông buff `@{username}` m·ªói 15 ph√∫t.", parse_mode="Markdown")
    auto_buff_tasks[user_id] = None
    auto_buff(username, chat_id, user_id)

# L·ªánh /huytreo (ch·ªâ admin)
@bot.message_handler(commands=['huytreo'])
@only_in_group
def handle_huytreo(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå L·ªánh n√†y ch·ªâ admin ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng.")
        return

    user_id = message.from_user.id
    task = auto_buff_tasks.pop(user_id, None)
    if task:
        task.cancel()

    bot.reply_to(message, "‚úÖ ƒê√£ d·ª´ng t·ª± ƒë·ªông buff.")

# Ch·∫°y bot
if __name__ == "__main__":
    print("Bot ƒëang ch·∫°y tr√™n Render...")
    bot.infinity_polling()
